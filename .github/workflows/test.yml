name: CI/CD

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    backend:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./backend
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 10

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20
                  cache: 'pnpm'

            - name: Cache MongoDB binaries
              uses: actions/cache@v3
              with:
                  path: ~/.cache/mongodb-binaries
                  key: mongo-binaries-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      mongo-binaries-${{ runner.os }}-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run backend tests
              run: MONGOMS_DOWNLOAD_DIR=$HOME/.cache/mongodb-binaries pnpm exec npm test
    frontend:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./frontend
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 10

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20
                  cache: 'pnpm'

            - name: Install frontend dependencies
              run: pnpm install --frozen-lockfile

            - name: Run frontend tests
              run: pnpm exec vitest run --environment=jsdom

    build-docs:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 10

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20
                  cache: 'pnpm'

            - name: Install root dependencies
              run: pnpm install --frozen-lockfile

            - name: Build documentation
              run: pnpm run docs:build

            - name: Upload docs artifact
              uses: actions/upload-artifact@v4
              with:
                  name: docs-dist
                  path: docs/.vitepress/dist

    build-deploy:
        runs-on: ubuntu-latest
        needs: [backend, frontend, build-docs]
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Download docs artifact
              uses: actions/download-artifact@v4
              with:
                  name: docs-dist
                  path: ./docs-dist

            - name: Deploy to VPS
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
              run: |
                  mkdir -p ~/.ssh
                  echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

                  scp -r -i ~/.ssh/id_rsa ./docs-dist/* ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/var/www/portlib/docs

                  ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
                    cd ~/portlib
                    git fetch origin main
                    git reset --hard origin/main

                    if [ ! -f .env ]; then
                      echo "${ENV_FILE}" > .env
                    fi

                    docker compose up --build -d
                  EOF
